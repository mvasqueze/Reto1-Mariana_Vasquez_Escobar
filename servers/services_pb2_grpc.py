# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import services_pb2 as services__pb2


class InventoryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ready = channel.unary_unary(
                '/Inventory/Ready',
                request_serializer=services__pb2.NullMessage.SerializeToString,
                response_deserializer=services__pb2.NullMessage.FromString,
                )
        self.setProducts = channel.unary_unary(
                '/Inventory/setProducts',
                request_serializer=services__pb2.setProduct.SerializeToString,
                response_deserializer=services__pb2.TransactionResponse.FromString,
                )
        self.getProducts = channel.unary_unary(
                '/Inventory/getProducts',
                request_serializer=services__pb2.getProduct.SerializeToString,
                response_deserializer=services__pb2.TransactionResponse.FromString,
                )


class InventoryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ready(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InventoryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ready': grpc.unary_unary_rpc_method_handler(
                    servicer.Ready,
                    request_deserializer=services__pb2.NullMessage.FromString,
                    response_serializer=services__pb2.NullMessage.SerializeToString,
            ),
            'setProducts': grpc.unary_unary_rpc_method_handler(
                    servicer.setProducts,
                    request_deserializer=services__pb2.setProduct.FromString,
                    response_serializer=services__pb2.TransactionResponse.SerializeToString,
            ),
            'getProducts': grpc.unary_unary_rpc_method_handler(
                    servicer.getProducts,
                    request_deserializer=services__pb2.getProduct.FromString,
                    response_serializer=services__pb2.TransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Inventory', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Inventory(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ready(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory/Ready',
            services__pb2.NullMessage.SerializeToString,
            services__pb2.NullMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory/setProducts',
            services__pb2.setProduct.SerializeToString,
            services__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory/getProducts',
            services__pb2.getProduct.SerializeToString,
            services__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ShoppingCartStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddProduct = channel.unary_unary(
                '/ShoppingCart/AddProduct',
                request_serializer=services__pb2.addToOrder.SerializeToString,
                response_deserializer=services__pb2.TransactionResponse.FromString,
                )
        self.ConfirmOrder = channel.unary_unary(
                '/ShoppingCart/ConfirmOrder',
                request_serializer=services__pb2.confirmOrder.SerializeToString,
                response_deserializer=services__pb2.TransactionResponse.FromString,
                )


class ShoppingCartServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShoppingCartServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.AddProduct,
                    request_deserializer=services__pb2.addToOrder.FromString,
                    response_serializer=services__pb2.TransactionResponse.SerializeToString,
            ),
            'ConfirmOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmOrder,
                    request_deserializer=services__pb2.confirmOrder.FromString,
                    response_serializer=services__pb2.TransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ShoppingCart', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ShoppingCart(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ShoppingCart/AddProduct',
            services__pb2.addToOrder.SerializeToString,
            services__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfirmOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ShoppingCart/ConfirmOrder',
            services__pb2.confirmOrder.SerializeToString,
            services__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ShipmentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ShipmentRegister = channel.unary_unary(
                '/Shipment/ShipmentRegister',
                request_serializer=services__pb2.Package.SerializeToString,
                response_deserializer=services__pb2.ShipmentConfirmation.FromString,
                )


class ShipmentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ShipmentRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShipmentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ShipmentRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.ShipmentRegister,
                    request_deserializer=services__pb2.Package.FromString,
                    response_serializer=services__pb2.ShipmentConfirmation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Shipment', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Shipment(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ShipmentRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Shipment/ShipmentRegister',
            services__pb2.Package.SerializeToString,
            services__pb2.ShipmentConfirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
